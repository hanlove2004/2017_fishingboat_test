<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="deal">

	<!-- 어선매도 목록 -->
	<select id="selectSellList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			<![CDATA[
				SELECT
					ROW_NUMBER() OVER(ORDER BY B.SEQ) AS ROWS_NUM,
					ROW_NUMBER() OVER(ORDER BY B.SEQ desc) AS RNUM,
					A.USR_ID,
					A.PW,
					A.NAM,
					A.USR_EMAIL,
					A.REG_DAT AS USR_REG_DAT, 
					A.ISADMIN, 
					B.SEQ, 
					B.SHIP_CODE, 
					B.STATUS_CODE, 
					B.HOPE_PRICE, 
					TO_CHAR(B.REG_DAT, 'yyyy/mm/dd') AS REG_DAT,
					B.SHIP_NO,
					C.CODE_CTN AS FS_MET_CODE,
					C.BRE AS SHIP_BRE,
					C.DPH AS SHIP_DPH,
					C.LEN AS SHIP_LEN,
					C.HANG_NAME AS SHIP_SGG,
					C.TON AS SHIP_TOT_TONS,
					C.SHP_NM,
					D.BROKE_YN,
					E.SAV_FLE_NAM as SELLPIC,
					D.YNCNT
				FROM 
					TB_USR_T A, 
					TB_FISHINGBOAT_SELL B,
					VI_SHIP C,
					(
						SELECT 
							BOARD_SEQ, 
							BROKE_YN, 
							COUNT(BROKE_YN) YNCNT 
						FROM 
							TB_BROKE_YN 
						WHERE 
							BROTYPE='sell' 
							AND BROKE_YN='Y' 
						GROUP BY 
							BOARD_SEQ, 
							BROKE_YN
					) D,
					(
						SELECT 
							MIN(SEQ) SEQ, 
							MIN(SAV_FLE_NAM) SAV_FLE_NAM, 
							MIN(BOARD_SEQ) BOARD_SEQ 
						FROM 
							TB_FISHINGBOAT_SELL_PIC 
						GROUP BY 
							BOARD_SEQ
					) E
				WHERE 
					A.USR_ID = B.USR_ID
					AND B.SHIP_NO = C.SHIP_NO
					AND B.SEQ = D.BOARD_SEQ(+)
					AND B.SEQ = E.BOARD_SEQ(+)
					AND A.USR_ID = #{usrid}
			]]>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 어선매도 목록에서 중개인 목록 보기 -->
	<select id="selectSellBrokerList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				B.SEQ, 
				B.SHIP_CODE, 
				B.STATUS_CODE, 
				B.HOPE_PRICE, 
				B.SHIP_NO,
				C.BROKE_ID,
				C.BROKE_YN,
				C.BROKE_CHK,
				D.NAM,
				D.USR_EMAIL,
				D.PHONE
			FROM 
				TB_USR_T A, 
				TB_FISHINGBOAT_SELL B,
				TB_BROKE_YN C,
				TB_USR_BROKE_T D
			WHERE 
				A.USR_ID = B.USR_ID
				AND B.SEQ = C.BOARD_SEQ
				AND C.BROKE_ID = D.USR_ID
				AND C.BROKE_YN = 'Y'
				AND B.SEQ = #{seq}
		]]>
	</select>
	
	<!-- 어선매도 목록에서 중개인 상세 보기 -->
	<select id="selectSellBrokerDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.USR_ID,
				A.PW,
				A.NAM,
				A.USR_EMAIL,
				A.REG_DAT,
				A.ISADMIN,
				A.PHONE,
				A.COMPANY,
				A.VIRTUALNO,
				B.BOARD_SEQ,
				B.BROKE_ID,
				B.BROTYPE,
				B.BROKE_CHK,
				B.SEQ AS BROKE_SEQ
			FROM
				TB_USR_BROKE_T A,
				TB_BROKE_YN B
			WHERE
				A.USR_ID = #{broid}
				AND B.BOARD_SEQ = #{seq}
				AND A.USR_ID = B.BROKE_ID(+)
		]]>
	</select>
	
	<!-- 어선매도 목록에서 중개인 상세 보기에서 중개인 선정 -->
	<update id="updateBrokerChk" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_BROKE_YN 
			SET
				BROKE_CHK = #{chk}
			WHERE 
				BOARD_SEQ = #{broseq}
				AND BROKE_ID = #{broid}
				AND BROTYPE = #{brotype}
		]]>
	</update>
	
	<!-- 어선매도 목록에서 중개인 상세 보기에서 중개인 선정시  문자 발송 insert -->
	<insert id="insertSellBrokerSms" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				SC_TRAN 
				(
					TR_NUM,
					TR_SENDDATE,
					TR_SENDSTAT,
					TR_MSGTYPE,
					TR_PHONE,
					TR_CALLBACK,
					TR_MSG
				) 
			VALUES 
				(
					1, 
					SYSDATE,
					'0',
					'0',
					'01062399693',
					(
						SELECT 
							SUBSTR(PHONE,0,3) || SUBSTR(PHONE,5,4) || SUBSTR(PHONE,10,4) 
						FROM 
							TB_USR_BROKE_T 
						WHERE 
							USR_ID = #{broid}
					),
					'의뢰인이 중개를 수락하였습니다. 어선거래시스템을 확인해 주세요. http://bm.어선거래.kr'
				)
		]]>
	</insert>
	
	<!-- 어선매도 목록에서 중개인 상세 보기에서 중개인 선정취소 -->
	<update id="updateBrokerChkno" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_BROKE_YN 
			SET
				BROKE_CHK = 'N'
			WHERE 
				BOARD_SEQ = #{broseq}
				AND BROKE_ID = #{broid}
				AND BROTYPE = #{brotype}
		]]>
	</update>
	
	<!-- 어선매도 상세보기 -->
	<select id="selectSellDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				A.USR_ID, 
				A.PW, 
				A.NAM, 
				A.USR_EMAIL, 
				A.REG_DAT AS USR_REG_DAT, 
				A.ISADMIN,
				A.PHONE,
				B.SEQ, 
				B.SHIP_CODE, 
				B.STATUS_CODE, 
				B.HOPE_PRICE, 
				TO_CHAR(B.REG_DAT, 'yyyy-mm-dd') AS REG_DAT, 
				B.SHIP_NO,
				SUBSTR(B.SHIP_NO,1,7)||' - '||SUBSTR(B.SHIP_NO,8,12) AS TITLE,
				C.CODE_CTN,
				C.BRE,
				C.DPH,
				C.LEN,
				C.HANG_NAME,
				C.TON,
				C.SHP_NM,
				C.ADDR,
				C.JOSUNJA,
				C.CODE_CTN_3,
				C.ENGINE_PS,
				SUBSTR(C.RGT_MBD_REG_NO,1,6) BIRTHDAY,
				D.ORG_FLE_NAM,
				D.SAV_FLE_NAM
			FROM 
				TB_USR_T A, 
				TB_FISHINGBOAT_SELL B,
				VI_SHIP C,
				( 
					SELECT 
						* 
					FROM 
						TB_FILE_T 
					WHERE 
						BOARD_TYPE='adminsellreal'
				) D
			WHERE 
				A.USR_ID = B.USR_ID
				AND B.SHIP_NO = C.SHIP_NO
				AND B.SEQ = D.BOARD_SEQ(+)
				AND B.SEQ = #{seq}
		]]>
	</select>
	
	<!-- 어선매도 상세보기 시 이미지목록 조회 -->
	<select id="selectSellImgList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				SEQ,
				BOARD_SEQ,
				ORG_FLE_NAM,
				SAV_FLE_NAM,
				REG_DAT,
				FIELDNAME
			FROM 
				TB_FISHINGBOAT_SELL_PIC
			WHERE
				BOARD_SEQ = #{seq}
		]]>
	</select>
	
	<!-- 어선매도 상세보기 시 중개인 만족도 평가 여부 조회 -->
	<select id="selectBrokerYn" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				SEQ,
				BOARD_SEQ,
				BROKE_ID,
				BROKE_YN,
				REG_DAT,
				BROTYPE,
				BROKE_CHK,
				SHIP_NO
			FROM 
				TB_BROKE_YN
			WHERE 
				BOARD_SEQ = #{seq}
				AND BROKE_CHK = 'Y'
		]]>
	</select>
	
	<!-- 어선매도 상세보기 시 중개인 만족도 평가 조회 -->
	<!-- 추후 삭제할 항목 -->
	<!-- <select id="selectBrokerSatis" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				BROKER_ID,
				SATISFACTION,
				SEQ,
				REG_DAT,
				USR_ID,
				DEALSEQ
			FROM 
				TB_BROKER_SATISFACTION
			WHERE 
				USR_ID = #{usrid}
				AND DEALSEQ = #{seq}
		]]>
	</select> -->
	
	<!-- 어선매도 상세보기 시 중개인 만족도 평가 조회 -->
	<select id="selectSatisfaction" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				BROKER_ID,
				SATISFACTION,
				SEQ,
				REG_DAT,
				USR_ID,
				DEALSEQ
			FROM 
				TB_BROKER_SATISFACTION
			WHERE 
				USR_ID = #{usrid}
				AND DEALSEQ = #{seq}
				AND BROKER_ID = #{broid}
		]]>
	</select>
	
	<!-- 어선매도 상세보기 에서 중개인 평가 insert -->
	<insert id="insertBrokerSatis" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_BROKER_SATISFACTION 
				(
					SEQ, 
					BROKER_ID, 
					SATISFACTION, 
					USR_ID, 
					REG_DAT, 
					DEALSEQ
				)
			VALUES
				(
					(
						SELECT 
							NVL(MAX(SEQ),0) + 1 
						FROM 
							TB_BROKER_SATISFACTION
					),
					#{broid},
					#{rate},
					#{usrid},
					SYSDATE,
					#{seq}
				)
		]]>
	</insert>
	
	<!-- 어선매도 insert -->
	<insert id="insertSell" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_FISHINGBOAT_SELL 
				(
					SEQ, 
					SHIP_CODE, 
					STATUS_CODE, 
					USR_ID, 
					HOPE_PRICE, 
					REG_DAT, 
					SHIP_NO, 
					GB, 
					COMM
				)
			VALUES 
				(
					FISHINGBOATSEQ.NEXTVAL,
					'001',
					'001',
					#{usrid},
					#{price},
					SYSDATE,
					#{shipno},
					#{gb},
					#{memo}
				)
		]]>
	</insert>
	
	<!-- 어선매도 등록 시 문자 발송 insert -->
	<insert id="insertSellSms" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				SC_TRAN 
				(
					TR_NUM,
					TR_SENDDATE,
					TR_SENDSTAT,
					TR_MSGTYPE,
					TR_PHONE,
					TR_CALLBACK,
					TR_MSG
				) 
			VALUES 
				(
					1,
					SYSDATE,
					'0',
					'0',
					'01062399693',
					(
						SELECT 
							SUBSTR(PHONE,0,3) || SUBSTR(PHONE,5,4) || SUBSTR(PHONE,10,4)
						FROM 
							TB_USR_ADMIN_T 
						WHERE 
							USR_ID = #{gb}
					),
					'이력확인서비스 신청되었습니다. 어선거래시스템을 확인해 주세요. http://kst.어선거래.kr'
				)
		]]>
	</insert>
	
	<!-- 어선 사진 insert -->
	<insert id="insertSellPic" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_FISHINGBOAT_SELL_PIC
				(
					SEQ, 
					BOARD_SEQ, 
					ORG_FLE_NAM, 
					SAV_FLE_NAM, 
					REG_DAT, 
					FIELDNAME 
				)
			VALUES
				(
					(
						SELECT 
							NVL(MAX(SEQ),0) + 1 
						FROM 
							TB_FISHINGBOAT_SELL_PIC
					),
					(
						SELECT 
							MAX(SEQ) 
						FROM 
							TB_FISHINGBOAT_SELL
					),
					#{ORIGINAL_FILE_NAME},
					#{STORED_FILE_NAME},
					SYSDATE,
					#{FILE_SIZE}
				)
		]]>
	</insert>
	
	<!-- 어선매도 쓰기 시 어선번호 조회 -->
	<select id="selectShipChk" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				* 
			FROM 
				VI_SHIP A
			WHERE 
				A.SHIP_NO = #{shipno}
		]]>
	</select>
	
	<!-- 어선매도 update -->
	<update id="updateSell" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_FISHINGBOAT_SELL 
			SET
				HOPE_PRICE = #{price}
			WHERE 
				SEQ = #{seq}
				AND USR_ID = #{usrid}
		]]>
	</update>
	
	<!-- 어선매도 delete -->
	<delete id="deleteSell" parameterType="hashmap">
		<![CDATA[
			DELETE FROM 
				TB_FISHINGBOAT_SELL 
			WHERE 
				SEQ = #{seq}
				AND USR_ID = #{usrid}
		]]>
	</delete>
	
	<!-- 어선매수 목록 -->
	<select id="selectBuyList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			<![CDATA[
				SELECT
					ROW_NUMBER() OVER(ORDER BY B.SEQ) AS RNUM,
					ROW_NUMBER() OVER(ORDER BY B.SEQ desc) AS ROWS_NUM,
					A.USR_ID, 
					A.PW, 
					A.NAM, 
					A.USR_EMAIL, 
					A.REG_DAT AS USR_REG_DAT, 
					A.ISADMIN, 
					B.SEQ, 
					B.SHIP_CODE, 
					B.STATUS_CODE, 
					B.HOPE_PRICE, 
					TO_CHAR(B.REG_DAT, 'yyyy/mm/dd') AS REG_DAT,
					B.FS_MET_CODE,
					B.REL_TRANS_CGG_CODE,
					B.SHIP_TOT_TONS,
					C.BROKE_YN,
					C.YNCNT
				FROM 
					TB_USR_T A,
					TB_FISHINGBOAT_BUY B,
					(
						SELECT 
							BOARD_SEQ, 
							BROKE_YN, 
							COUNT(BROKE_YN) YNCNT 
						FROM 
							TB_BROKE_YN 
						WHERE 
							BROTYPE = 'buy' 
							AND BROKE_YN='Y' 
						GROUP BY 
							BOARD_SEQ, 
							BROKE_YN
					) C
				WHERE 
					A.USR_ID = B.USR_ID
					AND B.SEQ = C.BOARD_SEQ(+)
					AND A.USR_ID = #{usrid}
			]]>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 어선매수 insert -->
	<insert id="insertBuy" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_FISHINGBOAT_BUY 
				(
					SEQ, 
					SHIP_CODE, 
					STATUS_CODE, 
					USR_ID, 
					HOPE_PRICE, 
					REG_DAT, 
					FS_MET_CODE, 
					REL_TRANS_CGG_CODE, 
					SHIP_TOT_TONS
				)
			VALUES
				(
					FISHINGBOATSEQ.NEXTVAL,
					'001',
					'001',
					#{usrid},
					#{price},
					SYSDATE,
					#{type},
					#{area},
					#{ton}
				)
		]]>
	</insert>
	
	<!-- 어선매수 상세보기 -->
	<select id="selectBuyDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				A.USR_ID, 
				A.PW, 
				A.NAM, 
				A.USR_EMAIL, 
				A.REG_DAT AS USR_REG_DAT, 
				A.ISADMIN, 
				B.SEQ, 
				B.SHIP_CODE, 
				B.STATUS_CODE, 
				B.HOPE_PRICE, 
				TO_CHAR(B.REG_DAT, 'yyyy-mm-dd') AS REG_DAT, 
				B.FS_MET_CODE,
				B.REL_TRANS_CGG_CODE,
				B.SHIP_TOT_TONS
			FROM 
				TB_USR_T A, 
				TB_FISHINGBOAT_BUY B 
			WHERE 
				A.USR_ID = B.USR_ID
				AND B.SEQ = #{seq}
		]]>
	</select>
	
	<!-- 어선매수 update -->
	<update id="updateBuy" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_FISHINGBOAT_BUY 
			SET
				HOPE_PRICE = #{price},
				FS_MET_CODE = #{type},
				REL_TRANS_CGG_CODE = #{area},
				SHIP_TOT_TONS = #{ton}
			WHERE 
				SEQ = #{seq}
				AND USR_ID = #{usrid}
		]]>
	</update>
	
	<!-- 어선매수 delete -->
	<delete id="deleteBuy" parameterType="hashmap">
		<![CDATA[
			DELETE FROM 
				TB_FISHINGBOAT_BUY 
			WHERE 
				SEQ = #{seq}
				AND USR_ID = #{usrid}
		]]>
	</delete>
	
	<!-- 어선매수 목록에서 중개인 목록 보기 -->
	<select id="selectBuyBrokerList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				B.SEQ, 
				B.SHIP_CODE, 
				B.STATUS_CODE, 
				B.HOPE_PRICE, 
				C.BROKE_ID,
				C.BROKE_YN,
				C.BROKE_CHK,
				D.NAM,
				D.USR_EMAIL,
				D.PHONE
			FROM 
				TB_USR_T A, 
				TB_FISHINGBOAT_BUY B,
				TB_BROKE_YN C,
				TB_USR_BROKE_T D
			WHERE 
				A.USR_ID = B.USR_ID
				AND B.SEQ = C.BOARD_SEQ
				AND C.BROKE_ID = D.USR_ID
				AND C.BROKE_YN = 'Y'
				AND B.SEQ = #{seq}
		]]>
	</select>
	
	<!-- 어선매수 목록에서 중개인 상세 보기 -->
	<!-- <select id="selectSellBrokerDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.USR_ID,
				A.PW,
				A.NAM,
				A.USR_EMAIL,
				A.REG_DAT,
				A.ISADMIN,
				A.PHONE,
				A.COMPANY,
				A.VIRTUALNO,
				B.BOARD_SEQ,
				B.BROKE_ID,
				B.BROTYPE,
				B.BROKE_CHK
			FROM
				TB_USR_BROKE_T A,
				TB_BROKE_YN B
			WHERE
				A.USR_ID = #{broid}
				AND B.BOARD_SEQ = #{seq}
				AND A.USR_ID = B.BROKE_ID(+)
		]]>
	</select> -->
	
	<!-- 매물현황 목록 -->
	<select id="selectDealList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			SELECT 
				ROW_NUMBER() OVER(ORDER BY SEQ) AS RNUM1,
				ROW_NUMBER() OVER(ORDER BY SEQ desc) AS ROWS_NUM1,
				USR_ID,
				SEQ,
				HOPE_PRICE,
				TO_CHAR(REG_DAT, 'yyyy-mm-dd') AS REG_DAT,
				CODE_CTN,
				HANG_NAME AS TITLE,
				TON,
				BROTYPE,
				SHIP_NO,
				ROWSNUM AS RNUM,
				ROWS_NUM,
				CNT,
				SHP_NM, 
				JOBKEY, 
				BROKE_ID, 
				SAV_FLE_NAM as SELLPIC
			FROM
				(
					SELECT 
						AA.*,
						BB.*,
						ROW_NUMBER() OVER(ORDER BY reg_dat) AS ROWSNUM,
						ROW_NUMBER() OVER(ORDER BY reg_dat desc) AS ROWS_NUM,
						COUNT(SEQ) OVER() AS CNT
					FROM
						(
							(
								SELECT 
									d.seq, 
									d.usr_id, 
									c.board_seq, 
									d.hang_name, 
									d.ton, 
									d.code_ctn, 
									d.hope_price, 
									d.reg_dat,
									c.broke_id, 
									c.brotype, 
									c.ship_no, 
									d.shp_nm, 
									E.SAV_FLE_NAM  
								FROM 
									(
										SELECT 
											* 
										FROM 
											TB_BROKE_YN 
										WHERE 
											BROKE_CHK = 'Y'
									) c,
									(
										SELECT 
											* 
										FROM
											(
												SELECT 
													* 
												FROM 
													TB_FISHINGBOAT_SELL
											) a,
											(
												SELECT 
													* 
												FROM 
													VI_SHIP
											) b
										WHERE 
											a.ship_no = b.ship_no
									) d,
									(
										SELECT 
											MIN(SEQ) SEQ, 
											MIN(SAV_FLE_NAM) SAV_FLE_NAM, 
											MIN(BOARD_SEQ) BOARD_SEQ 
										FROM 
											TB_FISHINGBOAT_SELL_PIC 
										GROUP BY 
											BOARD_SEQ
									) E
								WHERE 
									c.board_seq = d.seq
									AND c.board_seq = E.BOARD_SEQ(+)
							)
						UNION ALL
							(
								SELECT 
									f.seq, 
									f.usr_id, 
									e.board_seq, 
									f.rel_trans_cgg_code AS ship_sgg, 
									f.ship_tot_tons, 
									f.fs_met_code, 
									f.hope_price, 
									f.reg_dat,
									e.broke_id, 
									e.brotype, 
									e.ship_no, 
									e.ship_no AS shp_nm, 
									'SAV_FLE_NAM' SAV_FLE_NAM 
								FROM
									(
										SELECT 
											* 
										FROM 
											TB_BROKE_YN 
										WHERE 
											broke_chk = 'Y'
									) e,
									(
										SELECT 
											* 
										FROM 
											TB_FISHINGBOAT_BUY
									) f
								WHERE 
									e.board_seq = f.seq
							)
						) AA,
						TB_JOB_CODE_T BB
					WHERE 
						AA.CODE_CTN = BB.JOBVALUE
				) AAA
			WHERE 
				1 = 1
			<if test="keywordnum1 != null and keywordnum1 != ''">
				AND SUBSTR(SHIP_NO,1,7) LIKE '%' || #{keywordnum1} || '%'
			</if>
			<if test="keywordnum2 != null and keywordnum2 != ''">
				AND SUBSTR(SHIP_NO,8,12) LIKE '%' || #{keywordnum2} || '%'
			</if>
			<if test="keywordnam != null and keywordnam != ''">
				AND SHP_NM LIKE '%' || #{keywordnam} || '%'
			</if>
			<if test="keywordton != null and keywordton != 0">
				<choose>
					<when test="keywordton == 1">
						<![CDATA[
							AND TON <= 2
						]]> 
					</when>
					<when test="keywordton == 2">
						AND TON BETWEEN '2' AND '3'
					</when>
					<when test="keywordton == 3">
						AND TON BETWEEN '3' AND '5'
					</when>
					<when test="keywordton == 4">
						AND TON BETWEEN '5' AND '10'
					</when>
					<when test="keywordton == 5">
						AND TON BETWEEN '10' AND '20'
					</when>
					<when test="keywordton == 6">
						AND TON BETWEEN '20' AND '40'
					</when>
					<when test="keywordton == 7">
						AND TON BETWEEN '40' AND '80'
					</when>
					<when test="keywordton == 8">
						<![CDATA[
							AND TON >= 80
						]]> 
					</when>
				</choose>
			</if>
			<if test="keywordarea != null and keywordarea != ''">
				AND HANG_NAME LIKE '%' || #{keywordarea} || '%'
			</if>
			<if test="keywordjob != null and keywordjob != ''">
				AND JOBKEY LIKE '%' || #{keywordjob} || '%'
			</if>
		<include refid="common.pagingPost"/>
	</select>
	
</mapper>

