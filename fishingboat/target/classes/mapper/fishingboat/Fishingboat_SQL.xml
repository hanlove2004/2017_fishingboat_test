<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="fishingboat">

	<!-- 공지사항 목록 -->
	<select id="selectNoticeList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			<![CDATA[
				SELECT
					ROW_NUMBER() OVER (ORDER BY SEQ DESC) RNUM,
					SEQ,
					TITLE,
					CONTENT,
					ISSUSE,
					TO_CHAR(REG_DAT, 'yyyy/mm/dd') AS REG_DAT,
					HIT_CNT,
					USR_ID
				FROM
					TB_INFOR_T
				WHERE
					ISSUSE = 'Y'
			]]>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 공지사항 상세보기 -->
	<select id="selectNoticeDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.SEQ,
				A.TITLE,
				A.CONTENT,
				A.ISSUSE,
				TO_CHAR(A.REG_DAT, 'YYYY-MM-DD') AS REG_DAT,
				A.HIT_CNT,
				A.USR_ID,
				NVL(B.NAM, '관리자') AS NAM
			FROM 
				TB_INFOR_T A,
				TB_USR_T B
			WHERE
				A.SEQ = #{seq}
				AND A.USR_ID = B.USR_ID(+)
		]]>
	</select>
	
	<!-- 공지사항 상세보기 시 조회수 증가 -->
	<update id="updateNoticeHitCnt" parameterType="hashmap">
		UPDATE 
			TB_INFOR_T 
		SET
			HIT_CNT = HIT_CNT + 1
		WHERE 
			SEQ = #{seq}
	</update>
	
	<!-- 자료실 목록 -->
	<select id="selectDataList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			<![CDATA[
				SELECT
					ROW_NUMBER() OVER (ORDER BY SEQ DESC) RNUM,
					SEQ,
					TITLE,
					CONTENT,
					ISSUSE,
					TO_CHAR(REG_DAT, 'YYYY-MM-DD') AS REG_DAT,
					HIT_CNT,
					USR_ID
				FROM
					TB_FILEBOARD_T
				WHERE
					ISSUSE = 'Y'
			]]>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 자료실 상세보기 -->
	<select id="selectDataDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.SEQ,
				A.TITLE,
				A.CONTENT,
				A.ISSUSE,
				A.REG_DAT,
				A.HIT_CNT,
				A.USR_ID,
				B.ORG_FLE_NAM,
				B.SAV_FLE_NAM,
				B.SEQ AS FILE_SEQ,
				NVL(C.NAM, '관리자') AS NAM
			FROM 
				TB_FILEBOARD_T A,
				(
					SELECT 
						* 
					FROM 
						TB_FILE_T 
					WHERE 
						BOARD_TYPE='adminfileboard'
				) B,
				TB_USR_T C
			WHERE 
				A.SEQ = #{seq}
				AND A.SEQ = B.BOARD_SEQ(+)
				AND A.USR_ID = C.USR_ID(+)
		]]>
	</select>
	
	<!-- 자료실 상세보기 시 조회수 증가 -->
	<update id="updateDataHitCnt" parameterType="hashmap">
		UPDATE 
			TB_FILEBOARD_T 
		SET
			HIT_CNT = HIT_CNT + 1
		WHERE 
			SEQ = #{seq}
	</update>
	
	<!-- 자유게시판 목록 -->
	<select id="selectFreeList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			<![CDATA[
				SELECT
					ROW_NUMBER() OVER (ORDER BY A.SEQ DESC) RNUM,
					A.SEQ,
					A.TITLE,
					A.CONTENT,
					A.ISSUSE,
					TO_CHAR(A.REG_DAT, 'YYYY-MM-DD') AS REG_DAT,
					A.HIT_CNT,
					A.USR_ID,
					NVL(B.NAM,'관리자') AS NAM
				FROM
					TB_FREE_T A,
					TB_USR_T B
				WHERE
					A.ISSUSE = 'Y'
					AND A.USR_ID = B.USR_ID(+)
			]]>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 자유게시판 insert -->
	<insert id="insertFree" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_FREE_T 
				(
					SEQ, 
					TITLE, 
					CONTENT, 
					ISSUSE, 
					REG_DAT, 
					HIT_CNT, 
					USR_ID
				)
			VALUES 
				(
					(
						SELECT 
							NVL(MAX(seq),0) + 1 
						FROM
							TB_FREE_T
					),
					#{title},
					#{content},
					'Y',
					SYSDATE,
					'1',
					#{usrid}
				)
		]]>
	</insert>
	
	<!-- 자유게시판 상세보기 -->
	<select id="selectFreeDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.SEQ,
				A.TITLE,
				A.CONTENT,
				A.ISSUSE,
				TO_CHAR(A.REG_DAT, 'YYYY-MM-DD') AS REG_DAT,
				A.HIT_CNT,
				A.USR_ID,
				NVL(B.NAM, '관리자') AS NAM
			FROM 
				TB_FREE_T A,
				TB_USR_T B
			WHERE
				A.SEQ = #{seq}
				AND A.USR_ID = B.USR_ID(+)
		]]>
	</select>
	
	<!-- 자유게시판 상세보기 시 조회수 증가 -->
	<update id="updateFreeHitCnt" parameterType="hashmap">
		UPDATE 
			TB_FREE_T 
		SET
			HIT_CNT = HIT_CNT + 1
		WHERE 
			SEQ = #{seq}
	</update>
	
	<!-- 자유게시판 update -->
	<update id="updateFree" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_FREE_T 
			SET
				TITLE = #{title},
				CONTENT = #{content}
			WHERE 
				SEQ = #{seq}
		]]>
	</update>
	
	<!-- Q&A 목록 -->
	<select id="selectQnaList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			<![CDATA[
				SELECT
					ROW_NUMBER() OVER (ORDER BY SEQ DESC) RNUM,
					SEQ,
					TITLE,
					CONTENT,
					ISSUSE,
					TO_CHAR(REG_DAT, 'yyyy/mm/dd HH24:MI:SS') AS REG_DAT,
					HIT_CNT,
					USR_ID,
					ANSWER
				FROM 
					TB_QA_T
				WHERE
					ISSUSE = 'Y'
			]]>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- Q&A 상세보기 -->
	<select id="selectQnaDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.SEQ,
				A.TITLE,
				A.CONTENT,
				A.ISSUSE,
				TO_CHAR(A.REG_DAT, 'YYYY-MM-DD') AS REG_DAT,
				A.HIT_CNT,
				A.USR_ID,
				A.ANSWER,
				NVL(B.NAM, '관리자') AS NAM
			FROM 
				TB_QA_T A,
				TB_USR_T B
			WHERE
				A.SEQ = #{seq}
				AND A.USR_ID = B.USR_ID(+)
		]]>
	</select>
	
	<!-- Q&A insert -->
	<insert id="insertQna" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_QA_T 
				(
					SEQ, 
					TITLE, 
					CONTENT, 
					ISSUSE, 
					REG_DAT, 
					HIT_CNT, 
					USR_ID
				)
			VALUES
				(
					(
						SELECT 
							NVL(MAX(seq),0) + 1 
						FROM
							TB_QA_T
					),
					#{title},
					#{content},
					'Y',
					SYSDATE,
					'1',
					#{usrid}
				)
		]]>
	</insert>
	
	<!-- 관련규정 및 서식 목록 -->
	<select id="selectRuleList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			<![CDATA[
				SELECT
					ROW_NUMBER() OVER (ORDER BY A.SEQ DESC) RNUM,
					A.SEQ,
					A.TITLE,
					A.CONTENT,
					A.ISSUSE,
					TO_CHAR(A.REG_DAT, 'yyyy/mm/dd HH24:MI:SS') AS REG_DAT,
					A.HIT_CNT,
					A.USR_ID,
					B.ORG_FLE_NAM,
					B.SAV_FLE_NAM,
					B.SEQ AS FILE_SEQ
				FROM 
					TB_RULE_T A,
					(
						SELECT 
							* 
						FROM 
							TB_FILE_T 
						WHERE 
							BOARD_TYPE='ruleboard'
					) B
				WHERE 
					A.SEQ = B.BOARD_SEQ(+)
			]]>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 어선기본정보 조회 -->
	<select id="selectInfoList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			SELECT
				ROW_NUMBER() OVER(ORDER BY SHIP_NO) AS RNUM,
				ROW_NUMBER() OVER(ORDER BY SHIP_NO DESC) AS ROWS_NUM,
				SUBSTR(SHIP_NO,1,7)||' - '||SUBSTR(SHIP_NO,8,12) AS TITLE,
				SUBSTR(SHIP_NO,1,7) AS TITLE1,
				SUBSTR(SHIP_NO,8,12) AS TITLE2,
				SHIP_NO,
				RGT_MBD_NM,
				SHP_NM,
				FS_MET_CODE,
				CODE_CTN,
				SUNJONG,
				SHIP_MATS_CODE,
				SUNJEOKHANG,
				HANG_NAME,
				ENGINE_KIND,
				CODE_CTN_3,
				ENGINE_PS,
				ENGINE_KW,
				ENGINE_NUM,
				JOSUNJA,
				LEN,
				BRE,
				DPH,
				TON 
			FROM 
				(
					SELECT 
						A.SHIP_NO,
						A.RGT_MBD_NM,
						A.SHP_NM,
						A.FS_MET_CODE,
						A.CODE_CTN,
						A.SUNJONG,
						A.SHIP_MATS_CODE,
						A.SUNJEOKHANG,
						A.HANG_NAME,
						A.ENGINE_KIND,
						A.CODE_CTN_3,
						A.ENGINE_PS,
						A.ENGINE_KW,
						A.ENGINE_NUM,
						A.JOSUNJA,
						A.LEN,
						A.BRE,
						A.DPH,
						A.TON
					FROM 
						VI_SHIP A,
						(
							SELECT 
								* 
							FROM 
								TB_BROKE_YN 
							WHERE 
								BROTYPE='sell'
						) B
					WHERE 
						A.SHIP_NO(+) = B.SHIP_NO
					GROUP BY 
						A.SHIP_NO,
						A.RGT_MBD_NM,
						A.SHP_NM,
						A.FS_MET_CODE,
						A.CODE_CTN,
						A.SUNJONG,
						A.SHIP_MATS_CODE,
						A.SUNJEOKHANG,
						A.HANG_NAME,
						A.ENGINE_KIND,
						A.CODE_CTN_3,
						A.ENGINE_PS,
						A.ENGINE_KW,
						A.ENGINE_NUM,
						A.JOSUNJA,
						A.LEN,
						A.BRE,
						A.DPH,
						A.TON
				) AA,
				(
					SELECT 
						* 
					FROM 
						TB_JOB_CODE_T
				) BB
			WHERE 
				AA.CODE_CTN = BB.JOBVALUE(+)
			<if test="keywordnum1 != null and keywordnum1 != ''">
				AND SUBSTR(SHIP_NO,1,7) LIKE '%' || #{keywordnum1} || '%'
			</if>
			<if test="keywordnum2 != null and keywordnum2 != ''">
				AND SUBSTR(SHIP_NO,8,12) LIKE '%' || #{keywordnum2} || '%'
			</if>
			<if test="keywordnam != null and keywordnam != ''">
				AND SHP_NM LIKE '%' || #{keywordnam} || '%'
			</if>
			<if test="keywordton != null and keywordton != 0">
				<choose>
					<when test="keywordton == 1">
						<![CDATA[
							AND TON <= 2
						]]> 
					</when>
					<when test="keywordton == 2">
						AND TON BETWEEN '2' AND '3'
					</when>
					<when test="keywordton == 3">
						AND TON BETWEEN '3' AND '5'
					</when>
					<when test="keywordton == 4">
						AND TON BETWEEN '5' AND '10'
					</when>
					<when test="keywordton == 5">
						AND TON BETWEEN '10' AND '20'
					</when>
					<when test="keywordton == 6">
						AND TON BETWEEN '20' AND '40'
					</when>
					<when test="keywordton == 7">
						AND TON BETWEEN '40' AND '80'
					</when>
					<when test="keywordton == 8">
						<![CDATA[
							AND TON >= 80
						]]> 
					</when>
				</choose>
			</if>
			<if test="keywordarea != null and keywordarea != ''">
				AND HANG_NAME LIKE '%' || #{keywordarea} || '%'
			</if>
			<if test="keywordjob != null and keywordjob != ''">
				AND JOBKEY LIKE '%' || #{keywordjob} || '%'
			</if>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 어선기본정보 상세보기 -->
	<select id="selectInfoDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.SHIP_NO,
				SUBSTR(A.SHIP_NO,1,7)||' - '||SUBSTR(A.SHIP_NO,8,12) AS TITLE,
				A.RGT_MBD_NM,
				A.SHP_NM,
				A.FS_MET_CODE,
				A.CODE_CTN,
				A.SUNJONG,
				A.SHIP_MATS_CODE,
				A.SUNJEOKHANG,
				A.HANG_NAME,
				A.ENGINE_KIND,
				A.CODE_CTN_3,
				A.ENGINE_PS,
				A.ENGINE_KW,
				A.ENGINE_NUM,
				A.JOSUNJA,
				A.LEN,
				A.BRE,
				A.DPH,
				A.TON,
				B.NAME,
				B.RGT_MBD_REG_NO,
				B.JUSO,
				B.JIBUN,
				B.BIGO
			FROM 
				VI_SHIP A,
				MARTN_PNCORG B
			WHERE 
				A.SHIP_NO = #{shipNo}
				AND A.SHIP_NO = B.SHIP_NO(+)
		]]>
	</select>
	
	<!-- 어선검사정보 조회 -->
	<select id="selectInfoSearchList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			SELECT
				ROW_NUMBER() OVER(ORDER BY A.SHIP_NO) AS RNUM,
				ROW_NUMBER() OVER(ORDER BY A.SHIP_NO desc) AS ROWS_NUM,
				SUBSTR(A.SHIP_NO,1,7)||' - '||SUBSTR(A.SHIP_NO,8,12) AS TITLE,
				A.SHIP_NO,
				A.SHIP_NAME, 
				A.REGISTERED_LEN, 
				A.REGISTERED_BR, 
				A.REGISTERED_DTH, 
				A.MUSUN_SULBI, 
				A.MCR_KW, 
				A.MCE_PS, 
				A.LAUNCHED_DATE, 
				A.SHIP_BUILT, 
				A.SHIP_BUILDER, 
				A.OWNER_NAME, 
				A.OWNER_COMPANY, 
				A.SURVEY_T_DATE, 
				A.SURVEY_LOC, 
				A.REMARK
			FROM 
				VI_SHIP_MASTER A,
				(
					SELECT 
						* 
					FROM 
						TB_BROKE_YN 
					WHERE 
						BROTYPE='sell'
				) B
			WHERE 
				A.SHIP_NO(+) = B.SHIP_NO
				<if test="keywordnum1 != null and keywordnum1 != ''">
					AND SUBSTR(A.SHIP_NO,1,7) LIKE '%' || #{keywordnum1} || '%'
				</if>
				<if test="keywordnum2 != null and keywordnum2 != ''">
					AND SUBSTR(A.SHIP_NO,8,12) LIKE '%' || #{keywordnum2} || '%'
				</if>
				<if test="keywordnam != null and keywordnam != ''">
					AND A.SHIP_NAME LIKE '%' || #{keywordnam} || '%'
				</if>
			GROUP BY 
				A.SHIP_NO, 
				A.SHIP_NAME, 
				A.REGISTERED_LEN, 
				A.REGISTERED_BR, 
				A.REGISTERED_DTH, 
				A.MUSUN_SULBI, 
				A.MCR_KW, 
				A.MCE_PS, 
				A.LAUNCHED_DATE, 
				A.SHIP_BUILT, 
				A.SHIP_BUILDER, 
				A.OWNER_NAME, 
				A.OWNER_COMPANY, 
				A.SURVEY_T_DATE, 
				A.SURVEY_LOC, 
				A.REMARK
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 어선검사정보 상세보기 -->
	<select id="selectInfoSearchDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				SHIP_NO,
				SUBSTR(SHIP_NO,1,7)||' - '||SUBSTR(SHIP_NO,8,12) AS TITLE,
				SHIP_NAME,
				REGISTERED_LEN,
				REGISTERED_BR,
				REGISTERED_DTH,
				MUSUN_SULBI,
				MCR_KW,
				MCE_PS,
				LAUNCHED_DATE,
				SHIP_BUILT,
				SHIP_BUILDER,
				OWNER_NAME,
				OWNER_COMPANY,
				SURVEY_T_DATE,
				SURVEY_LOC,
				REMARK,
				OFFICE_KOR_NM,
				GUBUNVALUE
			FROM 
				VI_SHIP_MASTER
			WHERE 
				SHIP_NO = #{shipNo}
		]]>
	</select>
	
	<!-- 기타어선관련정보 (업체정보) -->
	<select id="selectStoreList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			SELECT
				ROW_NUMBER() OVER(ORDER BY STOREEDATE) AS RNUM,
				ROW_NUMBER() OVER(ORDER BY STOREEDATE desc) AS ROWS_NUM,
				STORENAME AS TITLE,
				STOREBOSS,
				STORETELNUMBER,
				PHONENUMBER,
				STORENUMBER,
				STORESDATE,
				STOREURL,
				STOREEDATE,
				STOREADDRESS,
				STOREADDRESS1,
				STOREADDRESS2,
				INTROTEXT,
				STORESERVICE,
				USR_ID,
				FLE_ORG_NAM,
				FLE_SAV_NAM,
				SEQ,
				ISUSE
			FROM
				TB_STORE
			WHERE
				1 = 1
				AND ISUSE = 'Y'
			<if test="keysido != null and keysido != ''">
				AND STOREADDRESS1 LIKE '%' || (SELECT VAL FROM TB_STORE_SIDO_CODE WHERE SIDOKEY = #{keysido}) || '%'
			</if>
			<if test="keygugun != null and keygugun != ''">
				AND STOREADDRESS1 LIKE '%' || (SELECT VAL FROM TB_STORE_GUGUN_CODE WHERE GUGUNKEY = #{keygugun}) || '%'
			</if>
			<if test="makeservice != null and makeservice != ''">
				AND REGEXP_LIKE(STORESERVICE, REPLACE(#{makeservice}, ',', '|'))
			</if>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 업체정보 목록에서 구군 검색 -->
	<select id="selectGugunKeyList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				* 
			FROM 
				TB_STORE_GUGUN_CODE 
			WHERE 
				GUGUNKEY LIKE #{keysido} || '%' 
		]]>
	</select>
	
	<!-- 업체정보 상세보기 -->
	<select id="selectStoreDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				STORENAME AS TITLE,
				STOREBOSS,
				STORETELNUMBER,
				PHONENUMBER,
				STORENUMBER,
				STORESDATE,
				STOREURL,
				TO_CHAR(STOREEDATE,'yyyy-mm-dd') AS STOREEDATE,
				STOREADDRESS,
				STOREADDRESS1,
				STOREADDRESS2,
				INTROTEXT,
				STORESERVICE,
				USR_ID,
				FLE_ORG_NAM,
				FLE_SAV_NAM,
				SEQ
			FROM 
				TB_STORE
			WHERE 
				SEQ = #{seq}
		]]>
	</select>
	
	<!-- 업체정보 약도파일 정보 insert -->
	<insert id="insertStoreAddr" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_FILE_T 
				(	
					SEQ, 
					BOARD_SEQ,
					ORG_FLE_NAM, 
					REG_DAT, 
					SAV_FLE_NAM, 
					BOARD_TYPE
				)
			VALUES 
				(
					(
						SELECT 
							NVL(MAX(SEQ), 0) + 1 
						FROM
							TB_FILE_T
					),
					(
						SELECT 
							NVL(MAX(SEQ),0) + 1
						FROM
							TB_STORE
					),
					#{ORIGINAL_FILE_NAME},
					SYSDATE,
					#{STORED_FILE_NAME},
					#{board_type}
				)
		]]>
	</insert>
	
	<!-- 업체정보 insert -->
	<insert id="insertStore" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_STORE
				(
					STORENAME,
					STOREBOSS,
					STORETELNUMBER,
					PHONENUMBER,
					STORENUMBER,
					STORESDATE,
					STOREURL,
					STOREEDATE,
					STOREADDRESS,
					STOREADDRESS1,
					STOREADDRESS2,
					INTROTEXT,
					STORESERVICE,
					USR_ID,
					FLE_ORG_NAM,
					FLE_SAV_NAM,
					SEQ
				)
			VALUES
				(
					#{storename},
					#{storeboss},
					#{storetel},
					#{phonenumber},
					#{storenumber},
					#{storesdate},
					#{storeurl},
					SYSDATE,
					#{sample6_postcode},
					#{sample6_address},
					#{sample6_address2},
					#{introtext},
					#{makeservice},
					#{usr_id},
					#{ORIGINAL_FILE_NAME},
					#{STORED_FILE_NAME},
					(
						SELECT 
							NVL(MAX(SEQ),0)+1 
						FROM
							TB_STORE
					)
				)
		]]>
	</insert>
	
	<!-- 내 배 팔기 목록 -->
	<select id="selectSellList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			<![CDATA[
				SELECT
					ROW_NUMBER() OVER(ORDER BY B.SEQ) AS RNUM,
					ROW_NUMBER() OVER(ORDER BY B.SEQ desc) AS ROWS_NUM,
					A.USR_ID,
					A.PW,
					A.NAM,
					A.USR_EMAIL,
					A.REG_DAT AS USR_REG_DAT, 
					A.ISADMIN, 
					B.SEQ, 
					B.SHIP_CODE, 
					B.STATUS_CODE, 
					B.HOPE_PRICE, 
					TO_CHAR(B.REG_DAT, 'yyyy/mm/dd') AS REG_DAT,
					B.SHIP_NO,
					C.CODE_CTN AS FS_MET_CODE,
					C.BRE AS SHIP_BRE,
					C.DPH AS SHIP_DPH,
					C.LEN AS SHIP_LEN,
					C.HANG_NAME AS SHIP_SGG,
					C.TON AS SHIP_TOT_TONS,
					C.SHP_NM,
					D.BROKE_YN,
					E.SAV_FLE_NAM as SELLPIC,
					D.YNCNT
				FROM 
					TB_USR_T A, 
					TB_FISHINGBOAT_SELL B,
					VI_SHIP C,
					(
						SELECT 
							BOARD_SEQ, 
							BROKE_YN, 
							COUNT(BROKE_YN) YNCNT 
						FROM 
							TB_BROKE_YN 
						WHERE 
							BROTYPE='sell' 
							AND BROKE_YN='Y' 
						GROUP BY 
							BOARD_SEQ, 
							BROKE_YN
					) D,
					(
						SELECT 
							MIN(SEQ) SEQ, 
							MIN(SAV_FLE_NAM) SAV_FLE_NAM, 
							MIN(BOARD_SEQ) BOARD_SEQ 
						FROM 
							TB_FISHINGBOAT_SELL_PIC 
						GROUP BY 
							BOARD_SEQ
					) E
				WHERE 
					A.USR_ID = B.USR_ID
					AND B.SHIP_NO = C.SHIP_NO
					AND B.SEQ = D.BOARD_SEQ(+)
					AND B.SEQ = E.BOARD_SEQ(+)
					AND A.USR_ID = #{usrid}
			]]>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 내 배 팔기 목록에서 중개인 목록 보기 -->
	<select id="selectSellBrokerList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				B.SEQ, 
				B.SHIP_CODE, 
				B.STATUS_CODE, 
				B.HOPE_PRICE, 
				B.SHIP_NO,
				C.BROKE_ID,
				C.BROKE_YN,
				C.BROKE_CHK,
				D.NAM,
				D.USR_EMAIL,
				D.PHONE
			FROM 
				TB_USR_T A, 
				TB_FISHINGBOAT_SELL B,
				TB_BROKE_YN C,
				TB_USR_BROKE_T D
			WHERE 
				A.USR_ID = B.USR_ID
				AND B.SEQ = C.BOARD_SEQ
				AND C.BROKE_ID = D.USR_ID
				AND C.BROKE_YN = 'Y'
				AND B.SEQ = #{seq}
		]]>
	</select>
	
	<!-- 내 배 팔기 목록에서 중개인 상세 보기 -->
	<select id="selectSellBrokerDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.USR_ID,
				A.PW,
				A.NAM,
				A.USR_EMAIL,
				A.REG_DAT,
				A.ISADMIN,
				A.PHONE,
				A.COMPANY,
				A.VIRTUALNO,
				B.BOARD_SEQ,
				B.BROKE_ID,
				B.BROTYPE,
				B.BROKE_CHK,
				B.SEQ AS BROKE_SEQ
			FROM
				TB_USR_BROKE_T A,
				TB_BROKE_YN B
			WHERE
				A.USR_ID = #{broid}
				AND B.BOARD_SEQ = #{seq}
				AND A.USR_ID = B.BROKE_ID(+)
		]]>
	</select>
	
	<!-- 내 배 팔기 목록에서 중개인 상세 보기에서 중개인 선정 -->
	<update id="updateBrokerChk" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_BROKE_YN 
			SET
				BROKE_CHK = #{chk}
			WHERE 
				BOARD_SEQ = #{broseq}
				AND BROKE_ID = #{broid}
				AND BROTYPE = #{brotype}
		]]>
	</update>
	
	<!-- 내 배 팔기 목록에서 중개인 상세 보기에서 중개인 선정시  문자 발송 insert -->
	<insert id="insertSellBrokerSms" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				SC_TRAN 
				(
					TR_NUM,
					TR_SENDDATE,
					TR_SENDSTAT,
					TR_MSGTYPE,
					TR_PHONE,
					TR_CALLBACK,
					TR_MSG
				) 
			VALUES 
				(
					1, 
					SYSDATE,
					'0',
					'0',
					'01062399693',
					(
						SELECT 
							SUBSTR(PHONE,0,3) || SUBSTR(PHONE,5,4) || SUBSTR(PHONE,10,4) 
						FROM 
							TB_USR_BROKE_T 
						WHERE 
							USR_ID = #{broid}
					),
					'의뢰인이 중개를 수락하였습니다. 어선거래시스템을 확인해 주세요. http://bm.어선거래.kr'
				)
		]]>
	</insert>
	
	<!-- 내 배 팔기 목록에서 중개인 상세 보기에서 중개인 선정취소 -->
	<update id="updateBrokerChkno" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_BROKE_YN 
			SET
				BROKE_CHK = 'N'
			WHERE 
				BOARD_SEQ = #{broseq}
				AND BROKE_ID = #{broid}
				AND BROTYPE = #{brotype}
		]]>
	</update>
	
	<!-- 내 배 팔기 상세보기 -->
	<select id="selectSellDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				A.USR_ID, 
				A.PW, 
				A.NAM, 
				A.USR_EMAIL, 
				A.REG_DAT AS USR_REG_DAT, 
				A.ISADMIN,
				A.PHONE,
				B.SEQ, 
				B.SHIP_CODE, 
				B.STATUS_CODE, 
				B.HOPE_PRICE, 
				TO_CHAR(B.REG_DAT, 'yyyy-mm-dd') AS REG_DAT, 
				B.SHIP_NO,
				SUBSTR(B.SHIP_NO,1,7)||' - '||SUBSTR(B.SHIP_NO,8,12) AS TITLE,
				C.CODE_CTN,
				C.BRE,
				C.DPH,
				C.LEN,
				C.HANG_NAME,
				C.TON,
				C.SHP_NM,
				C.ADDR,
				C.JOSUNJA,
				C.CODE_CTN_3,
				C.ENGINE_PS,
				SUBSTR(C.RGT_MBD_REG_NO,1,6) BIRTHDAY,
				D.ORG_FLE_NAM,
				D.SAV_FLE_NAM
			FROM 
				TB_USR_T A, 
				TB_FISHINGBOAT_SELL B,
				VI_SHIP C,
				( 
					SELECT 
						* 
					FROM 
						TB_FILE_T 
					WHERE 
						BOARD_TYPE='adminsellreal'
				) D
			WHERE 
				A.USR_ID = B.USR_ID
				AND B.SHIP_NO = C.SHIP_NO
				AND B.SEQ = D.BOARD_SEQ(+)
				AND B.SEQ = #{seq}
		]]>
	</select>
	
	<!-- 내 배 팔기 상세보기 시 이미지목록 조회 -->
	<select id="selectSellImgList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				SEQ,
				BOARD_SEQ,
				ORG_FLE_NAM,
				SAV_FLE_NAM,
				REG_DAT,
				FIELDNAME
			FROM 
				TB_FISHINGBOAT_SELL_PIC
			WHERE
				BOARD_SEQ = #{seq}
		]]>
	</select>
	
	<!-- 내 배 팔기 상세보기 시 중개인 만족도 평가 여부 조회 -->
	<select id="selectBrokerYn" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				SEQ,
				BOARD_SEQ,
				BROKE_ID,
				BROKE_YN,
				REG_DAT,
				BROTYPE,
				BROKE_CHK,
				SHIP_NO
			FROM 
				TB_BROKE_YN
			WHERE 
				BOARD_SEQ = #{seq}
				AND BROKE_CHK = 'Y'
		]]>
	</select>
	
	<!-- 내 배 팔기 상세보기 시 중개인 만족도 평가 조회 -->
	<!-- 추후 삭제할 항목 -->
	<!-- <select id="selectBrokerSatis" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				BROKER_ID,
				SATISFACTION,
				SEQ,
				REG_DAT,
				USR_ID,
				DEALSEQ
			FROM 
				TB_BROKER_SATISFACTION
			WHERE 
				USR_ID = #{usrid}
				AND DEALSEQ = #{seq}
		]]>
	</select> -->
	
	<!-- 내 배 팔기 상세보기 시 중개인 만족도 평가 조회 -->
	<select id="selectSatisfaction" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				BROKER_ID,
				SATISFACTION,
				SEQ,
				REG_DAT,
				USR_ID,
				DEALSEQ
			FROM 
				TB_BROKER_SATISFACTION
			WHERE 
				USR_ID = #{usrid}
				AND DEALSEQ = #{seq}
				AND BROKER_ID = #{broid}
		]]>
	</select>
	
	<!-- 내 배 팔기 상세보기 에서 중개인 평가 insert -->
	<insert id="insertBrokerSatis" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_BROKER_SATISFACTION 
				(
					SEQ, 
					BROKER_ID, 
					SATISFACTION, 
					USR_ID, 
					REG_DAT, 
					DEALSEQ
				)
			VALUES
				(
					(
						SELECT 
							NVL(MAX(SEQ),0) + 1 
						FROM 
							TB_BROKER_SATISFACTION
					),
					#{broid},
					#{rate},
					#{usrid},
					SYSDATE,
					#{seq}
				)
		]]>
	</insert>
	
	<!-- 내 배 팔기 insert -->
	<insert id="insertSell" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_FISHINGBOAT_SELL 
				(
					SEQ, 
					SHIP_CODE, 
					STATUS_CODE, 
					USR_ID, 
					HOPE_PRICE, 
					REG_DAT, 
					SHIP_NO, 
					GB, 
					COMM
				)
			VALUES 
				(
					FISHINGBOATSEQ.NEXTVAL,
					'001',
					'001',
					#{usrid},
					#{price},
					SYSDATE,
					#{shipno},
					#{gb},
					#{memo}
				)
		]]>
	</insert>
	
	<!-- 내 배 팔기 등록 시 문자 발송 insert -->
	<insert id="insertSellSms" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				SC_TRAN 
				(
					TR_NUM,
					TR_SENDDATE,
					TR_SENDSTAT,
					TR_MSGTYPE,
					TR_PHONE,
					TR_CALLBACK,
					TR_MSG
				) 
			VALUES 
				(
					1,
					SYSDATE,
					'0',
					'0',
					'01062399693',
					(
						SELECT 
							SUBSTR(PHONE,0,3) || SUBSTR(PHONE,5,4) || SUBSTR(PHONE,10,4)
						FROM 
							TB_USR_ADMIN_T 
						WHERE 
							USR_ID = #{gb}
					),
					'이력확인서비스 신청되었습니다. 어선거래시스템을 확인해 주세요. http://kst.어선거래.kr'
				)
		]]>
	</insert>
	
	<!-- 어선 사진 insert -->
	<insert id="insertSellPic" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_FISHINGBOAT_SELL_PIC
				(
					SEQ, 
					BOARD_SEQ, 
					ORG_FLE_NAM, 
					SAV_FLE_NAM, 
					REG_DAT, 
					FIELDNAME 
				)
			VALUES
				(
					(
						SELECT 
							NVL(MAX(SEQ),0) + 1 
						FROM 
							TB_FISHINGBOAT_SELL_PIC
					),
					(
						SELECT 
							MAX(SEQ) 
						FROM 
							TB_FISHINGBOAT_SELL
					),
					#{ORIGINAL_FILE_NAME},
					#{STORED_FILE_NAME},
					SYSDATE,
					#{FILE_SIZE}
				)
		]]>
	</insert>
	
	<!-- 내 배 팔기 쓰기 시 어선번호 조회 -->
	<select id="selectShipChk" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				* 
			FROM 
				VI_SHIP A
			WHERE 
				A.SHIP_NO = #{shipno}
		]]>
	</select>
	
	<!-- 내 배 팔기 update -->
	<update id="updateSell" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_FISHINGBOAT_SELL 
			SET
				HOPE_PRICE = #{price}
			WHERE 
				SEQ = #{seq}
				AND USR_ID = #{usrid}
		]]>
	</update>
	
	<!-- 내 배 팔기 delete -->
	<delete id="deleteSell" parameterType="hashmap">
		<![CDATA[
			DELETE FROM 
				TB_FISHINGBOAT_SELL 
			WHERE 
				SEQ = #{seq}
				AND USR_ID = #{usrid}
		]]>
	</delete>
	
	<!-- 내 배 사기 목록 -->
	<select id="selectBuyList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			<![CDATA[
				SELECT
					ROW_NUMBER() OVER(ORDER BY B.SEQ) AS RNUM,
					ROW_NUMBER() OVER(ORDER BY B.SEQ desc) AS ROWS_NUM,
					A.USR_ID, 
					A.PW, 
					A.NAM, 
					A.USR_EMAIL, 
					A.REG_DAT AS USR_REG_DAT, 
					A.ISADMIN, 
					B.SEQ, 
					B.SHIP_CODE, 
					B.STATUS_CODE, 
					B.HOPE_PRICE, 
					TO_CHAR(B.REG_DAT, 'yyyy/mm/dd') AS REG_DAT,
					B.FS_MET_CODE,
					B.REL_TRANS_CGG_CODE,
					B.SHIP_TOT_TONS,
					C.BROKE_YN,
					C.YNCNT
				FROM 
					TB_USR_T A,
					TB_FISHINGBOAT_BUY B,
					(
						SELECT 
							BOARD_SEQ, 
							BROKE_YN, 
							COUNT(BROKE_YN) YNCNT 
						FROM 
							TB_BROKE_YN 
						WHERE 
							BROTYPE = 'buy' 
							AND BROKE_YN='Y' 
						GROUP BY 
							BOARD_SEQ, 
							BROKE_YN
					) C
				WHERE 
					A.USR_ID = B.USR_ID
					AND B.SEQ = C.BOARD_SEQ(+)
					AND A.USR_ID = #{usrid}
			]]>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 내 배 사기 insert -->
	<insert id="insertBuy" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_FISHINGBOAT_BUY 
				(
					SEQ, 
					SHIP_CODE, 
					STATUS_CODE, 
					USR_ID, 
					HOPE_PRICE, 
					REG_DAT, 
					FS_MET_CODE, 
					REL_TRANS_CGG_CODE, 
					SHIP_TOT_TONS
				)
			VALUES
				(
					FISHINGBOATSEQ.NEXTVAL,
					'001',
					'001',
					#{usrid},
					#{price},
					SYSDATE,
					#{type},
					#{area},
					#{ton}
				)
		]]>
	</insert>
	
	<!-- 내 배 사기 상세보기 -->
	<select id="selectBuyDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				A.USR_ID, 
				A.PW, 
				A.NAM, 
				A.USR_EMAIL, 
				A.REG_DAT AS USR_REG_DAT, 
				A.ISADMIN, 
				B.SEQ, 
				B.SHIP_CODE, 
				B.STATUS_CODE, 
				B.HOPE_PRICE, 
				TO_CHAR(B.REG_DAT, 'yyyy-mm-dd') AS REG_DAT, 
				B.FS_MET_CODE,
				B.REL_TRANS_CGG_CODE,
				B.SHIP_TOT_TONS
			FROM 
				TB_USR_T A, 
				TB_FISHINGBOAT_BUY B 
			WHERE 
				A.USR_ID = B.USR_ID
				AND B.SEQ = #{seq}
		]]>
	</select>
	
	<!-- 내 배 사기 update -->
	<update id="updateBuy" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_FISHINGBOAT_BUY 
			SET
				HOPE_PRICE = #{price},
				FS_MET_CODE = #{type},
				REL_TRANS_CGG_CODE = #{area},
				SHIP_TOT_TONS = #{ton}
			WHERE 
				SEQ = #{seq}
				AND USR_ID = #{usrid}
		]]>
	</update>
	
	<!-- 내 배 사기 delete -->
	<delete id="deleteBuy" parameterType="hashmap">
		<![CDATA[
			DELETE FROM 
				TB_FISHINGBOAT_BUY 
			WHERE 
				SEQ = #{seq}
				AND USR_ID = #{usrid}
		]]>
	</delete>
	
	<!-- 내 배 사기 목록에서 중개인 목록 보기 -->
	<select id="selectBuyBrokerList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				B.SEQ, 
				B.SHIP_CODE, 
				B.STATUS_CODE, 
				B.HOPE_PRICE, 
				C.BROKE_ID,
				C.BROKE_YN,
				C.BROKE_CHK,
				D.NAM,
				D.USR_EMAIL,
				D.PHONE
			FROM 
				TB_USR_T A, 
				TB_FISHINGBOAT_BUY B,
				TB_BROKE_YN C,
				TB_USR_BROKE_T D
			WHERE 
				A.USR_ID = B.USR_ID
				AND B.SEQ = C.BOARD_SEQ
				AND C.BROKE_ID = D.USR_ID
				AND C.BROKE_YN = 'Y'
				AND B.SEQ = #{seq}
		]]>
	</select>
	
	<!-- 내 배 사기 목록에서 중개인 상세 보기 -->
	<!-- <select id="selectSellBrokerDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.USR_ID,
				A.PW,
				A.NAM,
				A.USR_EMAIL,
				A.REG_DAT,
				A.ISADMIN,
				A.PHONE,
				A.COMPANY,
				A.VIRTUALNO,
				B.BOARD_SEQ,
				B.BROKE_ID,
				B.BROTYPE,
				B.BROKE_CHK
			FROM
				TB_USR_BROKE_T A,
				TB_BROKE_YN B
			WHERE
				A.USR_ID = #{broid}
				AND B.BOARD_SEQ = #{seq}
				AND A.USR_ID = B.BROKE_ID(+)
		]]>
	</select> -->
	
	<!-- 매물현황 목록 -->
	<select id="selectDealList" parameterType="hashmap" resultType="hashmap">
		<include refid="common.pagingPre"/>
			SELECT 
				ROW_NUMBER() OVER(ORDER BY SEQ) AS RNUM1,
				ROW_NUMBER() OVER(ORDER BY SEQ desc) AS ROWS_NUM1,
				USR_ID,
				SEQ,
				HOPE_PRICE,
				TO_CHAR(REG_DAT, 'yyyy-mm-dd') AS REG_DAT,
				CODE_CTN,
				HANG_NAME AS TITLE,
				TON,
				BROTYPE,
				SHIP_NO,
				ROWSNUM AS RNUM,
				ROWS_NUM,
				CNT,
				SHP_NM, 
				JOBKEY, 
				BROKE_ID, 
				SAV_FLE_NAM as SELLPIC
			FROM
				(
					SELECT 
						AA.*,
						BB.*,
						ROW_NUMBER() OVER(ORDER BY reg_dat) AS ROWSNUM,
						ROW_NUMBER() OVER(ORDER BY reg_dat desc) AS ROWS_NUM,
						COUNT(SEQ) OVER() AS CNT
					FROM
						(
							(
								SELECT 
									d.seq, 
									d.usr_id, 
									c.board_seq, 
									d.hang_name, 
									d.ton, 
									d.code_ctn, 
									d.hope_price, 
									d.reg_dat,
									c.broke_id, 
									c.brotype, 
									c.ship_no, 
									d.shp_nm, 
									E.SAV_FLE_NAM  
								FROM 
									(
										SELECT 
											* 
										FROM 
											TB_BROKE_YN 
										WHERE 
											BROKE_CHK = 'Y'
									) c,
									(
										SELECT 
											* 
										FROM
											(
												SELECT 
													* 
												FROM 
													TB_FISHINGBOAT_SELL
											) a,
											(
												SELECT 
													* 
												FROM 
													VI_SHIP
											) b
										WHERE 
											a.ship_no = b.ship_no
									) d,
									(
										SELECT 
											MIN(SEQ) SEQ, 
											MIN(SAV_FLE_NAM) SAV_FLE_NAM, 
											MIN(BOARD_SEQ) BOARD_SEQ 
										FROM 
											TB_FISHINGBOAT_SELL_PIC 
										GROUP BY 
											BOARD_SEQ
									) E
								WHERE 
									c.board_seq = d.seq
									AND c.board_seq = E.BOARD_SEQ(+)
							)
						UNION ALL
							(
								SELECT 
									f.seq, 
									f.usr_id, 
									e.board_seq, 
									f.rel_trans_cgg_code AS ship_sgg, 
									f.ship_tot_tons, 
									f.fs_met_code, 
									f.hope_price, 
									f.reg_dat,
									e.broke_id, 
									e.brotype, 
									e.ship_no, 
									e.ship_no AS shp_nm, 
									'SAV_FLE_NAM' SAV_FLE_NAM 
								FROM
									(
										SELECT 
											* 
										FROM 
											TB_BROKE_YN 
										WHERE 
											broke_chk = 'Y'
									) e,
									(
										SELECT 
											* 
										FROM 
											TB_FISHINGBOAT_BUY
									) f
								WHERE 
									e.board_seq = f.seq
							)
						) AA,
						TB_JOB_CODE_T BB
					WHERE 
						AA.CODE_CTN = BB.JOBVALUE
				) AAA
			WHERE 
				1 = 1
			<if test="keywordnum1 != null and keywordnum1 != ''">
				AND SUBSTR(SHIP_NO,1,7) LIKE '%' || #{keywordnum1} || '%'
			</if>
			<if test="keywordnum2 != null and keywordnum2 != ''">
				AND SUBSTR(SHIP_NO,8,12) LIKE '%' || #{keywordnum2} || '%'
			</if>
			<if test="keywordnam != null and keywordnam != ''">
				AND SHP_NM LIKE '%' || #{keywordnam} || '%'
			</if>
			<if test="keywordton != null and keywordton != 0">
				<choose>
					<when test="keywordton == 1">
						<![CDATA[
							AND TON <= 2
						]]> 
					</when>
					<when test="keywordton == 2">
						AND TON BETWEEN '2' AND '3'
					</when>
					<when test="keywordton == 3">
						AND TON BETWEEN '3' AND '5'
					</when>
					<when test="keywordton == 4">
						AND TON BETWEEN '5' AND '10'
					</when>
					<when test="keywordton == 5">
						AND TON BETWEEN '10' AND '20'
					</when>
					<when test="keywordton == 6">
						AND TON BETWEEN '20' AND '40'
					</when>
					<when test="keywordton == 7">
						AND TON BETWEEN '40' AND '80'
					</when>
					<when test="keywordton == 8">
						<![CDATA[
							AND TON >= 80
						]]> 
					</when>
				</choose>
			</if>
			<if test="keywordarea != null and keywordarea != ''">
				AND HANG_NAME LIKE '%' || #{keywordarea} || '%'
			</if>
			<if test="keywordjob != null and keywordjob != ''">
				AND JOBKEY LIKE '%' || #{keywordjob} || '%'
			</if>
		<include refid="common.pagingPost"/>
	</select>
	
	<!-- 로그인 -->
	<select id="selectLogin" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				USR_ID, 
				NAM, 
				USR_EMAIL, 
				REG_DAT, 
				PHONE 
			FROM 
				TB_USR_T A
			WHERE 
				A.USR_ID = #{usrid}
				AND A.PW = #{usrpw}
		]]>
	</select>
	
	<!-- 아이디 중복 확인 -->
	<select id="selectIdCheck" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				COUNT(*) AS RESULT
			FROM 
				TB_USR_T A
			WHERE 
				A.USR_ID = #{usrid}
		]]>
	</select>
	
	<!-- 회원가입 -->
	<insert id="insertJoin" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_USR_T 
				(
					USR_ID, 
					PW, 
					NAM, 
					USR_EMAIL, 
					REG_DAT, 
					ISADMIN, 
					PHONE
				)
			VALUES 
				(
					#{usrid}, 
					#{usrpw}, 
					#{name}, 
					#{emailtrue}, 
					SYSDATE, 
					'N', 
					#{phonetrue}
				)
		]]>
	</insert>
	
	<!-- 회원정보 조회 -->
	<select id="selectMemberInfo" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				USR_ID, 
				NAM, 
				USR_EMAIL,
				TO_CHAR(REG_DAT, 'YYYY-MM-DD') AS REG_DAT,
				PHONE,
				PW
			FROM 
				TB_USR_T A
			WHERE 
				A.USR_ID = #{usrid}
		]]>
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateMemberInfo" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_USR_T 
			SET
				PW = #{usrpw},
				USR_EMAIL = #{emailtrue},
				PHONE = #{phonetrue}
			WHERE 
				USR_ID = #{usrid}
		]]>
	</update>
	
	<!-- 회원탈퇴 -->
	<delete id="deleteMember" parameterType="hashmap">
		<![CDATA[
			DELETE FROM 
				TB_USR_T 
			WHERE 
				USR_ID = #{usrid}
		]]>
	</delete>
	
	<!-- 아이디찾기 -->
	<select id="selectUsrIdSearch" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				A.USR_ID,
				A.PW,
				A.NAM,
				A.USR_EMAIL,
				TO_CHAR(A.REG_DAT, 'yyyy-mm-dd') AS REG_DAT,
				A.ISADMIN,
				A.PHONE
			FROM 
				TB_USR_T A
			WHERE 
				A.NAM = #{nam}
				AND A.USR_EMAIL = #{email}
		]]>
	</select>
	
	<!-- 비밀번호찾기 -->
	<select id="selectUsrPwSearch" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT 
				A.USR_ID,
				A.PW,
				A.NAM,
				A.USR_EMAIL,
				TO_CHAR(A.REG_DAT, 'yyyy-mm-dd') AS REG_DAT,
				A.ISADMIN,
				A.PHONE
			FROM 
				TB_USR_T A
			WHERE 
				A.NAM = #{nam}
				AND A.USR_ID = #{usid}
				AND A.USR_EMAIL = #{email}
		]]>
	</select>
	
	<!-- 페이지 평가 insert -->
	<insert id="insertEval" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_CONTENT_EVAL 
				(
					SEQ, 
					PAGE, 
					REG_DATE, 
					SCORE, 
					USR_ID
				)
			VALUES 
				(
					(
						SELECT 
							NVL(MAX(SEQ),0) + 1 
						FROM
							TB_CONTENT_EVAL
					),
					#{page},
					SYSDATE,
					#{evalchk},
					#{evalid}
				)
		]]>
	</insert>
	
	<!-- 페이지 로그 입력 -->
	<insert id="insertPageStats" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_PAGELOG_T 
				(
					SEQ, 
					REG_DAT, 
					USR_IP, 
					PAGE, 
					USR_ID
				)
			VALUES 
				(
					(
						SELECT 
							NVL(MAX(SEQ),0) + 1 
						FROM
							TB_PAGELOG_T
					),
					SYSDATE,
					#{usr_ip},
					#{page},
					#{usr_id}
				)
		]]>
	</insert>
	
	<!-- 하단은 샘플 코드 -->
	<insert id="insertBoard" parameterType="hashmap" useGeneratedKeys="true" keyProperty="IDX">
		<selectKey keyProperty="IDX" resultType="string" order="BEFORE">
			SELECT SEQ_TB_BOARD_IDX.NEXTVAL FROM DUAL
		</selectKey>
		<![CDATA[
			INSERT INTO TB_BOARD
				(
					IDX,
					TITLE,
					CONTENTS,
					HIT_CNT,
					DEL_GB,
					CREA_DTM,
					CREA_ID
				)
			VALUES
				(
					#{IDX},
					#{TITLE},
					#{CONTENTS},
					0,
					'N',
					SYSDATE,
					'Admin'
				)
		]]>
	</insert>
	
	<update id="updateHitCnt" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_INFOR_T
			SET
				HIT_CNT = NVL(HIT_CNT, 0) + 1
			WHERE
				SEQ = #{SEQ}
		]]>
	</update>
	
	<select id="selectBoardDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				SEQ,
				HIT_CNT,
				USR_ID,
				TO_CHAR(REG_DAT, 'yyyy/mm/dd HH24:MI:SS') AS REG_DAT,
				TITLE,
				CONTENT
			FROM
				TB_INFOR_T
			WHERE
				SEQ = #{SEQ}
		]]>
	</select>
	
	<update id="updateBoard" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_INFOR_T
			SET
				TITLE = #{TITLE},
				CONTENT = #{CONTENT}
			WHERE
				SEQ = #{SEQ}
		]]>
	</update>
	
	<update id="deleteBoard" parameterType="hashmap">
		<![CDATA[
			UPDATE 
				TB_INFOR_T
			SET
				ISSUSE = 'N'
			WHERE
				SEQ = #{SEQ}
		]]>
	</update>
	
	<insert id="insertFile" parameterType="hashmap">
		<![CDATA[
			INSERT INTO 
				TB_FILE
				(
					IDX,
					BOARD_IDX,
					ORIGINAL_FILE_NAME,
					STORED_FILE_NAME,
					FILE_SIZE,
					CREA_ID
				)
			VALUES
				(
					SEQ_TB_FILE_IDX.NEXTVAL,
					#{BOARD_IDX},
					#{ORIGINAL_FILE_NAME},
					#{STORED_FILE_NAME},
					#{FILE_SIZE},
					'Admin'
				)
		]]>
	</insert>
	
	<select id="selectFileList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				IDX,
				ORIGINAL_FILE_NAME,
				ROUND(FILE_SIZE/1024,1) AS FILE_SIZE
			FROM
				TB_FILE
			WHERE
				BOARD_IDX = #{IDX}
				AND DEL_GB = 'N'
		]]>
	</select>
	
	<update id="deleteFileList" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_FILE SET
				DEL_GB = 'Y'
			WHERE
				BOARD_IDX = #{IDX} 
		]]>
	</update>

	<update id="updateFile" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_FILE SET
				DEL_GB = 'N'
			WHERE
				IDX = #{FILE_IDX}
		]]>
	</update>

</mapper>

